// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/isikhi/go-rate-limiter/ent/gen/ratelimitoptions"
)

// RateLimitOptionsCreate is the builder for creating a RateLimitOptions entity.
type RateLimitOptionsCreate struct {
	config
	mutation *RateLimitOptionsMutation
	hooks    []Hook
}

// SetClientID sets the "client_id" field.
func (rloc *RateLimitOptionsCreate) SetClientID(s string) *RateLimitOptionsCreate {
	rloc.mutation.SetClientID(s)
	return rloc
}

// SetTokenCount sets the "token_count" field.
func (rloc *RateLimitOptionsCreate) SetTokenCount(s string) *RateLimitOptionsCreate {
	rloc.mutation.SetTokenCount(s)
	return rloc
}

// SetDurationInSeconds sets the "duration_in_seconds" field.
func (rloc *RateLimitOptionsCreate) SetDurationInSeconds(s string) *RateLimitOptionsCreate {
	rloc.mutation.SetDurationInSeconds(s)
	return rloc
}

// SetThrottlePercentage sets the "throttle_percentage" field.
func (rloc *RateLimitOptionsCreate) SetThrottlePercentage(s string) *RateLimitOptionsCreate {
	rloc.mutation.SetThrottlePercentage(s)
	return rloc
}

// SetCreatedAt sets the "created_at" field.
func (rloc *RateLimitOptionsCreate) SetCreatedAt(t time.Time) *RateLimitOptionsCreate {
	rloc.mutation.SetCreatedAt(t)
	return rloc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rloc *RateLimitOptionsCreate) SetNillableCreatedAt(t *time.Time) *RateLimitOptionsCreate {
	if t != nil {
		rloc.SetCreatedAt(*t)
	}
	return rloc
}

// SetID sets the "id" field.
func (rloc *RateLimitOptionsCreate) SetID(u uint64) *RateLimitOptionsCreate {
	rloc.mutation.SetID(u)
	return rloc
}

// Mutation returns the RateLimitOptionsMutation object of the builder.
func (rloc *RateLimitOptionsCreate) Mutation() *RateLimitOptionsMutation {
	return rloc.mutation
}

// Save creates the RateLimitOptions in the database.
func (rloc *RateLimitOptionsCreate) Save(ctx context.Context) (*RateLimitOptions, error) {
	return withHooks(ctx, rloc.sqlSave, rloc.mutation, rloc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rloc *RateLimitOptionsCreate) SaveX(ctx context.Context) *RateLimitOptions {
	v, err := rloc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rloc *RateLimitOptionsCreate) Exec(ctx context.Context) error {
	_, err := rloc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rloc *RateLimitOptionsCreate) ExecX(ctx context.Context) {
	if err := rloc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rloc *RateLimitOptionsCreate) check() error {
	if _, ok := rloc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`gen: missing required field "RateLimitOptions.client_id"`)}
	}
	if _, ok := rloc.mutation.TokenCount(); !ok {
		return &ValidationError{Name: "token_count", err: errors.New(`gen: missing required field "RateLimitOptions.token_count"`)}
	}
	if _, ok := rloc.mutation.DurationInSeconds(); !ok {
		return &ValidationError{Name: "duration_in_seconds", err: errors.New(`gen: missing required field "RateLimitOptions.duration_in_seconds"`)}
	}
	if _, ok := rloc.mutation.ThrottlePercentage(); !ok {
		return &ValidationError{Name: "throttle_percentage", err: errors.New(`gen: missing required field "RateLimitOptions.throttle_percentage"`)}
	}
	return nil
}

func (rloc *RateLimitOptionsCreate) sqlSave(ctx context.Context) (*RateLimitOptions, error) {
	if err := rloc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rloc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rloc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	rloc.mutation.id = &_node.ID
	rloc.mutation.done = true
	return _node, nil
}

func (rloc *RateLimitOptionsCreate) createSpec() (*RateLimitOptions, *sqlgraph.CreateSpec) {
	var (
		_node = &RateLimitOptions{config: rloc.config}
		_spec = sqlgraph.NewCreateSpec(ratelimitoptions.Table, sqlgraph.NewFieldSpec(ratelimitoptions.FieldID, field.TypeUint64))
	)
	if id, ok := rloc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rloc.mutation.ClientID(); ok {
		_spec.SetField(ratelimitoptions.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := rloc.mutation.TokenCount(); ok {
		_spec.SetField(ratelimitoptions.FieldTokenCount, field.TypeString, value)
		_node.TokenCount = value
	}
	if value, ok := rloc.mutation.DurationInSeconds(); ok {
		_spec.SetField(ratelimitoptions.FieldDurationInSeconds, field.TypeString, value)
		_node.DurationInSeconds = value
	}
	if value, ok := rloc.mutation.ThrottlePercentage(); ok {
		_spec.SetField(ratelimitoptions.FieldThrottlePercentage, field.TypeString, value)
		_node.ThrottlePercentage = value
	}
	if value, ok := rloc.mutation.CreatedAt(); ok {
		_spec.SetField(ratelimitoptions.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// RateLimitOptionsCreateBulk is the builder for creating many RateLimitOptions entities in bulk.
type RateLimitOptionsCreateBulk struct {
	config
	builders []*RateLimitOptionsCreate
}

// Save creates the RateLimitOptions entities in the database.
func (rlocb *RateLimitOptionsCreateBulk) Save(ctx context.Context) ([]*RateLimitOptions, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rlocb.builders))
	nodes := make([]*RateLimitOptions, len(rlocb.builders))
	mutators := make([]Mutator, len(rlocb.builders))
	for i := range rlocb.builders {
		func(i int, root context.Context) {
			builder := rlocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RateLimitOptionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rlocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rlocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rlocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rlocb *RateLimitOptionsCreateBulk) SaveX(ctx context.Context) []*RateLimitOptions {
	v, err := rlocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlocb *RateLimitOptionsCreateBulk) Exec(ctx context.Context) error {
	_, err := rlocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlocb *RateLimitOptionsCreateBulk) ExecX(ctx context.Context) {
	if err := rlocb.Exec(ctx); err != nil {
		panic(err)
	}
}
