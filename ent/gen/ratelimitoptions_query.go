// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/isikhi/go-rate-limiter/ent/gen/predicate"
	"github.com/isikhi/go-rate-limiter/ent/gen/ratelimitoptions"
)

// RateLimitOptionsQuery is the builder for querying RateLimitOptions entities.
type RateLimitOptionsQuery struct {
	config
	ctx        *QueryContext
	order      []ratelimitoptions.OrderOption
	inters     []Interceptor
	predicates []predicate.RateLimitOptions
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RateLimitOptionsQuery builder.
func (rloq *RateLimitOptionsQuery) Where(ps ...predicate.RateLimitOptions) *RateLimitOptionsQuery {
	rloq.predicates = append(rloq.predicates, ps...)
	return rloq
}

// Limit the number of records to be returned by this query.
func (rloq *RateLimitOptionsQuery) Limit(limit int) *RateLimitOptionsQuery {
	rloq.ctx.Limit = &limit
	return rloq
}

// Offset to start from.
func (rloq *RateLimitOptionsQuery) Offset(offset int) *RateLimitOptionsQuery {
	rloq.ctx.Offset = &offset
	return rloq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rloq *RateLimitOptionsQuery) Unique(unique bool) *RateLimitOptionsQuery {
	rloq.ctx.Unique = &unique
	return rloq
}

// Order specifies how the records should be ordered.
func (rloq *RateLimitOptionsQuery) Order(o ...ratelimitoptions.OrderOption) *RateLimitOptionsQuery {
	rloq.order = append(rloq.order, o...)
	return rloq
}

// First returns the first RateLimitOptions entity from the query.
// Returns a *NotFoundError when no RateLimitOptions was found.
func (rloq *RateLimitOptionsQuery) First(ctx context.Context) (*RateLimitOptions, error) {
	nodes, err := rloq.Limit(1).All(setContextOp(ctx, rloq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ratelimitoptions.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rloq *RateLimitOptionsQuery) FirstX(ctx context.Context) *RateLimitOptions {
	node, err := rloq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RateLimitOptions ID from the query.
// Returns a *NotFoundError when no RateLimitOptions ID was found.
func (rloq *RateLimitOptionsQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = rloq.Limit(1).IDs(setContextOp(ctx, rloq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ratelimitoptions.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rloq *RateLimitOptionsQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := rloq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RateLimitOptions entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RateLimitOptions entity is found.
// Returns a *NotFoundError when no RateLimitOptions entities are found.
func (rloq *RateLimitOptionsQuery) Only(ctx context.Context) (*RateLimitOptions, error) {
	nodes, err := rloq.Limit(2).All(setContextOp(ctx, rloq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ratelimitoptions.Label}
	default:
		return nil, &NotSingularError{ratelimitoptions.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rloq *RateLimitOptionsQuery) OnlyX(ctx context.Context) *RateLimitOptions {
	node, err := rloq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RateLimitOptions ID in the query.
// Returns a *NotSingularError when more than one RateLimitOptions ID is found.
// Returns a *NotFoundError when no entities are found.
func (rloq *RateLimitOptionsQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = rloq.Limit(2).IDs(setContextOp(ctx, rloq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ratelimitoptions.Label}
	default:
		err = &NotSingularError{ratelimitoptions.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rloq *RateLimitOptionsQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := rloq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RateLimitOptionsSlice.
func (rloq *RateLimitOptionsQuery) All(ctx context.Context) ([]*RateLimitOptions, error) {
	ctx = setContextOp(ctx, rloq.ctx, "All")
	if err := rloq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RateLimitOptions, *RateLimitOptionsQuery]()
	return withInterceptors[[]*RateLimitOptions](ctx, rloq, qr, rloq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rloq *RateLimitOptionsQuery) AllX(ctx context.Context) []*RateLimitOptions {
	nodes, err := rloq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RateLimitOptions IDs.
func (rloq *RateLimitOptionsQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if rloq.ctx.Unique == nil && rloq.path != nil {
		rloq.Unique(true)
	}
	ctx = setContextOp(ctx, rloq.ctx, "IDs")
	if err = rloq.Select(ratelimitoptions.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rloq *RateLimitOptionsQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := rloq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rloq *RateLimitOptionsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rloq.ctx, "Count")
	if err := rloq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rloq, querierCount[*RateLimitOptionsQuery](), rloq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rloq *RateLimitOptionsQuery) CountX(ctx context.Context) int {
	count, err := rloq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rloq *RateLimitOptionsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rloq.ctx, "Exist")
	switch _, err := rloq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("gen: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rloq *RateLimitOptionsQuery) ExistX(ctx context.Context) bool {
	exist, err := rloq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RateLimitOptionsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rloq *RateLimitOptionsQuery) Clone() *RateLimitOptionsQuery {
	if rloq == nil {
		return nil
	}
	return &RateLimitOptionsQuery{
		config:     rloq.config,
		ctx:        rloq.ctx.Clone(),
		order:      append([]ratelimitoptions.OrderOption{}, rloq.order...),
		inters:     append([]Interceptor{}, rloq.inters...),
		predicates: append([]predicate.RateLimitOptions{}, rloq.predicates...),
		// clone intermediate query.
		sql:  rloq.sql.Clone(),
		path: rloq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ClientID string `json:"client_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RateLimitOptions.Query().
//		GroupBy(ratelimitoptions.FieldClientID).
//		Aggregate(gen.Count()).
//		Scan(ctx, &v)
func (rloq *RateLimitOptionsQuery) GroupBy(field string, fields ...string) *RateLimitOptionsGroupBy {
	rloq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RateLimitOptionsGroupBy{build: rloq}
	grbuild.flds = &rloq.ctx.Fields
	grbuild.label = ratelimitoptions.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ClientID string `json:"client_id,omitempty"`
//	}
//
//	client.RateLimitOptions.Query().
//		Select(ratelimitoptions.FieldClientID).
//		Scan(ctx, &v)
func (rloq *RateLimitOptionsQuery) Select(fields ...string) *RateLimitOptionsSelect {
	rloq.ctx.Fields = append(rloq.ctx.Fields, fields...)
	sbuild := &RateLimitOptionsSelect{RateLimitOptionsQuery: rloq}
	sbuild.label = ratelimitoptions.Label
	sbuild.flds, sbuild.scan = &rloq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RateLimitOptionsSelect configured with the given aggregations.
func (rloq *RateLimitOptionsQuery) Aggregate(fns ...AggregateFunc) *RateLimitOptionsSelect {
	return rloq.Select().Aggregate(fns...)
}

func (rloq *RateLimitOptionsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rloq.inters {
		if inter == nil {
			return fmt.Errorf("gen: uninitialized interceptor (forgotten import gen/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rloq); err != nil {
				return err
			}
		}
	}
	for _, f := range rloq.ctx.Fields {
		if !ratelimitoptions.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
		}
	}
	if rloq.path != nil {
		prev, err := rloq.path(ctx)
		if err != nil {
			return err
		}
		rloq.sql = prev
	}
	return nil
}

func (rloq *RateLimitOptionsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RateLimitOptions, error) {
	var (
		nodes = []*RateLimitOptions{}
		_spec = rloq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RateLimitOptions).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RateLimitOptions{config: rloq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rloq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (rloq *RateLimitOptionsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rloq.querySpec()
	_spec.Node.Columns = rloq.ctx.Fields
	if len(rloq.ctx.Fields) > 0 {
		_spec.Unique = rloq.ctx.Unique != nil && *rloq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rloq.driver, _spec)
}

func (rloq *RateLimitOptionsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ratelimitoptions.Table, ratelimitoptions.Columns, sqlgraph.NewFieldSpec(ratelimitoptions.FieldID, field.TypeUint64))
	_spec.From = rloq.sql
	if unique := rloq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rloq.path != nil {
		_spec.Unique = true
	}
	if fields := rloq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ratelimitoptions.FieldID)
		for i := range fields {
			if fields[i] != ratelimitoptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rloq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rloq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rloq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rloq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rloq *RateLimitOptionsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rloq.driver.Dialect())
	t1 := builder.Table(ratelimitoptions.Table)
	columns := rloq.ctx.Fields
	if len(columns) == 0 {
		columns = ratelimitoptions.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rloq.sql != nil {
		selector = rloq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rloq.ctx.Unique != nil && *rloq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rloq.predicates {
		p(selector)
	}
	for _, p := range rloq.order {
		p(selector)
	}
	if offset := rloq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rloq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RateLimitOptionsGroupBy is the group-by builder for RateLimitOptions entities.
type RateLimitOptionsGroupBy struct {
	selector
	build *RateLimitOptionsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rlogb *RateLimitOptionsGroupBy) Aggregate(fns ...AggregateFunc) *RateLimitOptionsGroupBy {
	rlogb.fns = append(rlogb.fns, fns...)
	return rlogb
}

// Scan applies the selector query and scans the result into the given value.
func (rlogb *RateLimitOptionsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rlogb.build.ctx, "GroupBy")
	if err := rlogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RateLimitOptionsQuery, *RateLimitOptionsGroupBy](ctx, rlogb.build, rlogb, rlogb.build.inters, v)
}

func (rlogb *RateLimitOptionsGroupBy) sqlScan(ctx context.Context, root *RateLimitOptionsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rlogb.fns))
	for _, fn := range rlogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rlogb.flds)+len(rlogb.fns))
		for _, f := range *rlogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rlogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rlogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RateLimitOptionsSelect is the builder for selecting fields of RateLimitOptions entities.
type RateLimitOptionsSelect struct {
	*RateLimitOptionsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rlos *RateLimitOptionsSelect) Aggregate(fns ...AggregateFunc) *RateLimitOptionsSelect {
	rlos.fns = append(rlos.fns, fns...)
	return rlos
}

// Scan applies the selector query and scans the result into the given value.
func (rlos *RateLimitOptionsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rlos.ctx, "Select")
	if err := rlos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RateLimitOptionsQuery, *RateLimitOptionsSelect](ctx, rlos.RateLimitOptionsQuery, rlos, rlos.inters, v)
}

func (rlos *RateLimitOptionsSelect) sqlScan(ctx context.Context, root *RateLimitOptionsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rlos.fns))
	for _, fn := range rlos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rlos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rlos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
