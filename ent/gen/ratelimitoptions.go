// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/isikhi/go-rate-limiter/ent/gen/ratelimitoptions"
)

// RateLimitOptions is the model entity for the RateLimitOptions schema.
type RateLimitOptions struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// TokenCount holds the value of the "token_count" field.
	TokenCount string `json:"token_count,omitempty"`
	// DurationInSeconds holds the value of the "duration_in_seconds" field.
	DurationInSeconds string `json:"duration_in_seconds,omitempty"`
	// ThrottlePercentage holds the value of the "throttle_percentage" field.
	ThrottlePercentage string `json:"throttle_percentage,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"-"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RateLimitOptions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ratelimitoptions.FieldID:
			values[i] = new(sql.NullInt64)
		case ratelimitoptions.FieldClientID, ratelimitoptions.FieldTokenCount, ratelimitoptions.FieldDurationInSeconds, ratelimitoptions.FieldThrottlePercentage:
			values[i] = new(sql.NullString)
		case ratelimitoptions.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RateLimitOptions fields.
func (rlo *RateLimitOptions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ratelimitoptions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rlo.ID = uint64(value.Int64)
		case ratelimitoptions.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				rlo.ClientID = value.String
			}
		case ratelimitoptions.FieldTokenCount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_count", values[i])
			} else if value.Valid {
				rlo.TokenCount = value.String
			}
		case ratelimitoptions.FieldDurationInSeconds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration_in_seconds", values[i])
			} else if value.Valid {
				rlo.DurationInSeconds = value.String
			}
		case ratelimitoptions.FieldThrottlePercentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field throttle_percentage", values[i])
			} else if value.Valid {
				rlo.ThrottlePercentage = value.String
			}
		case ratelimitoptions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rlo.CreatedAt = value.Time
			}
		default:
			rlo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RateLimitOptions.
// This includes values selected through modifiers, order, etc.
func (rlo *RateLimitOptions) Value(name string) (ent.Value, error) {
	return rlo.selectValues.Get(name)
}

// Update returns a builder for updating this RateLimitOptions.
// Note that you need to call RateLimitOptions.Unwrap() before calling this method if this RateLimitOptions
// was returned from a transaction, and the transaction was committed or rolled back.
func (rlo *RateLimitOptions) Update() *RateLimitOptionsUpdateOne {
	return NewRateLimitOptionsClient(rlo.config).UpdateOne(rlo)
}

// Unwrap unwraps the RateLimitOptions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rlo *RateLimitOptions) Unwrap() *RateLimitOptions {
	_tx, ok := rlo.config.driver.(*txDriver)
	if !ok {
		panic("gen: RateLimitOptions is not a transactional entity")
	}
	rlo.config.driver = _tx.drv
	return rlo
}

// String implements the fmt.Stringer.
func (rlo *RateLimitOptions) String() string {
	var builder strings.Builder
	builder.WriteString("RateLimitOptions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rlo.ID))
	builder.WriteString("client_id=")
	builder.WriteString(rlo.ClientID)
	builder.WriteString(", ")
	builder.WriteString("token_count=")
	builder.WriteString(rlo.TokenCount)
	builder.WriteString(", ")
	builder.WriteString("duration_in_seconds=")
	builder.WriteString(rlo.DurationInSeconds)
	builder.WriteString(", ")
	builder.WriteString("throttle_percentage=")
	builder.WriteString(rlo.ThrottlePercentage)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rlo.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RateLimitOptionsSlice is a parsable slice of RateLimitOptions.
type RateLimitOptionsSlice []*RateLimitOptions
