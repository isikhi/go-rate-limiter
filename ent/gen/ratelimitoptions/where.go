// Code generated by ent, DO NOT EDIT.

package ratelimitoptions

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/isikhi/go-rate-limiter/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLTE(FieldID, id))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldClientID, v))
}

// TokenCount applies equality check predicate on the "token_count" field. It's identical to TokenCountEQ.
func TokenCount(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldTokenCount, v))
}

// DurationInSeconds applies equality check predicate on the "duration_in_seconds" field. It's identical to DurationInSecondsEQ.
func DurationInSeconds(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldDurationInSeconds, v))
}

// ThrottlePercentage applies equality check predicate on the "throttle_percentage" field. It's identical to ThrottlePercentageEQ.
func ThrottlePercentage(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldThrottlePercentage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldCreatedAt, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldContainsFold(FieldClientID, v))
}

// TokenCountEQ applies the EQ predicate on the "token_count" field.
func TokenCountEQ(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldTokenCount, v))
}

// TokenCountNEQ applies the NEQ predicate on the "token_count" field.
func TokenCountNEQ(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNEQ(FieldTokenCount, v))
}

// TokenCountIn applies the In predicate on the "token_count" field.
func TokenCountIn(vs ...string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldIn(FieldTokenCount, vs...))
}

// TokenCountNotIn applies the NotIn predicate on the "token_count" field.
func TokenCountNotIn(vs ...string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNotIn(FieldTokenCount, vs...))
}

// TokenCountGT applies the GT predicate on the "token_count" field.
func TokenCountGT(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGT(FieldTokenCount, v))
}

// TokenCountGTE applies the GTE predicate on the "token_count" field.
func TokenCountGTE(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGTE(FieldTokenCount, v))
}

// TokenCountLT applies the LT predicate on the "token_count" field.
func TokenCountLT(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLT(FieldTokenCount, v))
}

// TokenCountLTE applies the LTE predicate on the "token_count" field.
func TokenCountLTE(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLTE(FieldTokenCount, v))
}

// TokenCountContains applies the Contains predicate on the "token_count" field.
func TokenCountContains(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldContains(FieldTokenCount, v))
}

// TokenCountHasPrefix applies the HasPrefix predicate on the "token_count" field.
func TokenCountHasPrefix(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldHasPrefix(FieldTokenCount, v))
}

// TokenCountHasSuffix applies the HasSuffix predicate on the "token_count" field.
func TokenCountHasSuffix(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldHasSuffix(FieldTokenCount, v))
}

// TokenCountEqualFold applies the EqualFold predicate on the "token_count" field.
func TokenCountEqualFold(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEqualFold(FieldTokenCount, v))
}

// TokenCountContainsFold applies the ContainsFold predicate on the "token_count" field.
func TokenCountContainsFold(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldContainsFold(FieldTokenCount, v))
}

// DurationInSecondsEQ applies the EQ predicate on the "duration_in_seconds" field.
func DurationInSecondsEQ(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldDurationInSeconds, v))
}

// DurationInSecondsNEQ applies the NEQ predicate on the "duration_in_seconds" field.
func DurationInSecondsNEQ(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNEQ(FieldDurationInSeconds, v))
}

// DurationInSecondsIn applies the In predicate on the "duration_in_seconds" field.
func DurationInSecondsIn(vs ...string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldIn(FieldDurationInSeconds, vs...))
}

// DurationInSecondsNotIn applies the NotIn predicate on the "duration_in_seconds" field.
func DurationInSecondsNotIn(vs ...string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNotIn(FieldDurationInSeconds, vs...))
}

// DurationInSecondsGT applies the GT predicate on the "duration_in_seconds" field.
func DurationInSecondsGT(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGT(FieldDurationInSeconds, v))
}

// DurationInSecondsGTE applies the GTE predicate on the "duration_in_seconds" field.
func DurationInSecondsGTE(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGTE(FieldDurationInSeconds, v))
}

// DurationInSecondsLT applies the LT predicate on the "duration_in_seconds" field.
func DurationInSecondsLT(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLT(FieldDurationInSeconds, v))
}

// DurationInSecondsLTE applies the LTE predicate on the "duration_in_seconds" field.
func DurationInSecondsLTE(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLTE(FieldDurationInSeconds, v))
}

// DurationInSecondsContains applies the Contains predicate on the "duration_in_seconds" field.
func DurationInSecondsContains(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldContains(FieldDurationInSeconds, v))
}

// DurationInSecondsHasPrefix applies the HasPrefix predicate on the "duration_in_seconds" field.
func DurationInSecondsHasPrefix(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldHasPrefix(FieldDurationInSeconds, v))
}

// DurationInSecondsHasSuffix applies the HasSuffix predicate on the "duration_in_seconds" field.
func DurationInSecondsHasSuffix(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldHasSuffix(FieldDurationInSeconds, v))
}

// DurationInSecondsEqualFold applies the EqualFold predicate on the "duration_in_seconds" field.
func DurationInSecondsEqualFold(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEqualFold(FieldDurationInSeconds, v))
}

// DurationInSecondsContainsFold applies the ContainsFold predicate on the "duration_in_seconds" field.
func DurationInSecondsContainsFold(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldContainsFold(FieldDurationInSeconds, v))
}

// ThrottlePercentageEQ applies the EQ predicate on the "throttle_percentage" field.
func ThrottlePercentageEQ(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldThrottlePercentage, v))
}

// ThrottlePercentageNEQ applies the NEQ predicate on the "throttle_percentage" field.
func ThrottlePercentageNEQ(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNEQ(FieldThrottlePercentage, v))
}

// ThrottlePercentageIn applies the In predicate on the "throttle_percentage" field.
func ThrottlePercentageIn(vs ...string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldIn(FieldThrottlePercentage, vs...))
}

// ThrottlePercentageNotIn applies the NotIn predicate on the "throttle_percentage" field.
func ThrottlePercentageNotIn(vs ...string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNotIn(FieldThrottlePercentage, vs...))
}

// ThrottlePercentageGT applies the GT predicate on the "throttle_percentage" field.
func ThrottlePercentageGT(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGT(FieldThrottlePercentage, v))
}

// ThrottlePercentageGTE applies the GTE predicate on the "throttle_percentage" field.
func ThrottlePercentageGTE(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGTE(FieldThrottlePercentage, v))
}

// ThrottlePercentageLT applies the LT predicate on the "throttle_percentage" field.
func ThrottlePercentageLT(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLT(FieldThrottlePercentage, v))
}

// ThrottlePercentageLTE applies the LTE predicate on the "throttle_percentage" field.
func ThrottlePercentageLTE(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLTE(FieldThrottlePercentage, v))
}

// ThrottlePercentageContains applies the Contains predicate on the "throttle_percentage" field.
func ThrottlePercentageContains(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldContains(FieldThrottlePercentage, v))
}

// ThrottlePercentageHasPrefix applies the HasPrefix predicate on the "throttle_percentage" field.
func ThrottlePercentageHasPrefix(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldHasPrefix(FieldThrottlePercentage, v))
}

// ThrottlePercentageHasSuffix applies the HasSuffix predicate on the "throttle_percentage" field.
func ThrottlePercentageHasSuffix(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldHasSuffix(FieldThrottlePercentage, v))
}

// ThrottlePercentageEqualFold applies the EqualFold predicate on the "throttle_percentage" field.
func ThrottlePercentageEqualFold(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEqualFold(FieldThrottlePercentage, v))
}

// ThrottlePercentageContainsFold applies the ContainsFold predicate on the "throttle_percentage" field.
func ThrottlePercentageContainsFold(v string) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldContainsFold(FieldThrottlePercentage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.RateLimitOptions {
	return predicate.RateLimitOptions(sql.FieldNotNull(FieldCreatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RateLimitOptions) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RateLimitOptions) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RateLimitOptions) predicate.RateLimitOptions {
	return predicate.RateLimitOptions(func(s *sql.Selector) {
		p(s.Not())
	})
}
